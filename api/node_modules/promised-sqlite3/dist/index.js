"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncStatement = exports.AsyncDatabase = void 0;
const sqlite3_1 = __importDefault(require("sqlite3"));
/**
 * A thin wrapper around {@link sqlite3.Database} that expose an async API.
 */
class AsyncDatabase {
    /**
     * Create a new {@link AsyncDatabase} from a {@link sqlite3.Database} object.
     *
     * @see Use {@link AsyncDatabase.open} to create and open the database with the async API.
     *
     * @param db - The {@link sqlite3.Database} object.
     */
    constructor(db) {
        this.db = db;
    }
    /**
     * @returns The inner {@link sqlite3.Database} object.
     */
    get inner() {
        return this.db;
    }
    /**
     * Returns a new {@link AsyncDatabase} object and automatically opens the database.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#new-sqlite3databasefilename--mode--callback | new sqlite3.Database} for further informations.
     * @param filename - The filename used to instantiate the {@link sqlite3.Database} object.
     * @param mode - The mode used to instantiate the {@link sqlite3.Database} object.
     */
    static open(filename, mode = sqlite3_1.default.OPEN_READWRITE |
        sqlite3_1.default.OPEN_CREATE |
        sqlite3_1.default.OPEN_FULLMUTEX) {
        return new Promise((resolve, reject) => {
            const db = new sqlite3_1.default.Database(filename, mode, (err) => {
                if (err)
                    reject(err);
                else
                    resolve(new AsyncDatabase(db));
            });
        });
    }
    /**
     * Close the database.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#closecallback | sqlite3.Database.close} for further informations.
     */
    close() {
        return new Promise((resolve, reject) => {
            this.db.close((err) => {
                if (err)
                    reject(err);
                else
                    resolve();
            });
        });
    }
    /**
     * Runs the SQL query with the specified parameters.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#runsql--param---callback | sqlite3.Database.run} for further informations.
     * @param sql - The sql request.
     * @param params - Parameters for the request.
     */
    run(sql, ...params) {
        return new Promise((resolve, reject) => {
            // If there is only one argument, unwrap it to allow the user to pass an object for named parameters.
            const p = params.length === 1 ? params[0] : params;
            this.db.run(sql, p, function (err) {
                if (err)
                    reject(err);
                else
                    resolve(this);
            });
        });
    }
    /**
     * Runs the SQL query with the specified parameters.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#getsql--param---callback | sqlite3.Database.get} for further informations.
     * @param sql - The sql request.
     * @param params - Parameters for the request.
     */
    get(sql, ...params) {
        return new Promise((resolve, reject) => {
            // If there is only one argument, unwrap it to allow the user to pass an object for named parameters.
            const p = params.length === 1 ? params[0] : params;
            this.db.get(sql, p, function (err, row) {
                if (err)
                    reject(err);
                else
                    resolve(row);
            });
        });
    }
    /**
     * Runs the SQL query with the specified parameters.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#allsql--param---callback | sqlite3.Database.all} for further informations.
     * @param sql - The sql request.
     * @param params - Parameters for the request.
     */
    all(sql, ...params) {
        return new Promise((resolve, reject) => {
            // If there is only one argument, unwrap it to allow the user to pass an object for named parameters.
            const p = params.length === 1 ? params[0] : params;
            this.db.all(sql, p, function (err, rows) {
                if (err)
                    reject(err);
                else
                    resolve(rows);
            });
        });
    }
    /**
     * Runs the SQL query with the specified parameters and calls the callback once for each result row.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#eachsql--param---callback--complete | sqlite3.Database.each} for further informations.
     * @param sql - The sql request.
     * @param params - Parameters for the request.
     * @param callback - A callback that take a row.
     */
    each(sql, params, callback) {
        return new Promise((resolve, reject) => {
            this.db.each(sql, params, function (err, row) {
                if (err)
                    reject(err);
                else {
                    try {
                        callback(row);
                    }
                    catch (e) {
                        reject(e);
                    }
                }
            }, function (err, count) {
                if (err)
                    reject(err);
                else
                    resolve(count);
            });
        });
    }
    /**
     * Runs all SQL queries in the supplied string.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#execsql--callback | sqlite3.Database.exec} for further informations.
     * @param sql - The sql request.
     */
    exec(sql) {
        return new Promise((resolve, reject) => {
            this.db.exec(sql, function (err) {
                if (err)
                    reject(err);
                else
                    resolve();
            });
        });
    }
    /**
     * Prepares the SQL statement and optionally binds the specified parameters.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#preparesql--param---callback | sqlite3.Database.prepare} for further informations.
     * @param sql - The sql request.
     * @param params - Parameters for the request.
     */
    prepare(sql, ...params) {
        return new Promise((resolve, reject) => {
            // If there is only one argument, unwrap it to allow the user to pass an object for named parameters.
            const p = params.length === 1 ? params[0] : params;
            this.db.prepare(sql, p, function (err) {
                if (err)
                    reject(err);
                else
                    resolve(new AsyncStatement(this));
            });
        });
    }
}
exports.AsyncDatabase = AsyncDatabase;
/**
 * A thin wrapper around {@link sqlite3.Statement} that expose an async API.
 */
class AsyncStatement {
    /**
     * Create a new {@link AsyncStatement} from a {@link sqlite3.Statement} object.
     *
     * @see Use {@link AsyncDatabase.prepare} to create a statement with the async API.
     *
     * @param statement - The {@link sqlite3.Statement} object.
     */
    constructor(statement) {
        this.statement = statement;
    }
    /**
     * @returns The inner {@link sqlite3.Statement} object.
     */
    get inner() {
        return this.statement;
    }
    /**
     * Binds parameters to the prepared statement.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#bindparam---callback | sqlite3.Statement.bind} for further informations.
     * @param params - Parameters for the request.
     */
    bind(...params) {
        return new Promise((resolve, reject) => {
            // If there is only one argument, unwrap it to allow the user to pass an object for named parameters.
            const p = params.length === 1 ? params[0] : params;
            this.statement.bind(p, (err) => {
                if (err)
                    reject(err);
                else
                    resolve();
            });
        });
    }
    /**
     * Resets the row cursor of the statement and preserves the parameter bindings.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#resetcallback | sqlite3.Statement.reset} for further informations.
     */
    reset() {
        return new Promise((resolve) => {
            this.statement.reset(() => {
                resolve();
            });
        });
    }
    /**
     * Finalizes the statement.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#finalizecallback | sqlite3.Statement.finalize} for further informations.
     */
    finalize() {
        return new Promise((resolve, reject) => {
            this.statement.finalize((err) => {
                if (err)
                    reject();
                else
                    resolve();
            });
        });
    }
    /**
     * Binds parameters and executes the statement.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#runparam---callback | sqlite3.Statement.run} for further informations.
     * @param params - Parameters for the request.
     */
    run(...params) {
        return new Promise((resolve, reject) => {
            // If there is only one argument, unwrap it to allow the user to pass an object for named parameters.
            const p = params.length === 1 ? params[0] : params;
            this.statement.run(p, function (err) {
                if (err)
                    reject(err);
                else
                    resolve(this);
            });
        });
    }
    /**
     * Binds parameters, executes the statement and retrieves the first result row.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#getparam---callback | sqlite3.Statement.get} for further informations.
     * @param params - Parameters for the request.
     */
    get(...params) {
        return new Promise((resolve, reject) => {
            // If there is only one argument, unwrap it to allow the user to pass an object for named parameters.
            const p = params.length === 1 ? params[0] : params;
            this.statement.get(p, function (err, row) {
                if (err)
                    reject(err);
                else
                    resolve(row);
            });
        });
    }
    /**
     * Binds parameters, executes the statement and calls the callback with all result rows.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#allparam---callback | sqlite3.Statement.all} for further informations.
     * @param params - Parameters for the request.
     */
    all(...params) {
        return new Promise((resolve, reject) => {
            // If there is only one argument, unwrap it to allow the user to pass an object for named parameters.
            const p = params.length === 1 ? params[0] : params;
            this.statement.all(p, function (err, rows) {
                if (err)
                    reject(err);
                else
                    resolve(rows);
            });
        });
    }
    /**
     * Binds parameters, executes the statement and calls the callback for each result row.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#eachparam---callback--complete | sqlite3.Statement.each} for further informations.
     * @param params - Parameters for the request.
     * @param callback - A callback that take a row.
     */
    each(params, callback) {
        return new Promise((resolve, reject) => {
            this.statement.each(params, function (err, row) {
                if (err)
                    reject(err);
                else {
                    try {
                        callback(row);
                    }
                    catch (e) {
                        reject(e);
                    }
                }
            }, function (err, count) {
                if (err)
                    reject(err);
                else
                    resolve(count);
            });
        });
    }
}
exports.AsyncStatement = AsyncStatement;
