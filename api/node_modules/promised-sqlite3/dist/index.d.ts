import sqlite3 from "sqlite3";
/**
 * A thin wrapper around {@link sqlite3.Database} that expose an async API.
 */
export declare class AsyncDatabase {
    private db;
    /**
     * Create a new {@link AsyncDatabase} from a {@link sqlite3.Database} object.
     *
     * @see Use {@link AsyncDatabase.open} to create and open the database with the async API.
     *
     * @param db - The {@link sqlite3.Database} object.
     */
    constructor(db: sqlite3.Database);
    /**
     * @returns The inner {@link sqlite3.Database} object.
     */
    get inner(): sqlite3.Database;
    /**
     * Returns a new {@link AsyncDatabase} object and automatically opens the database.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#new-sqlite3databasefilename--mode--callback | new sqlite3.Database} for further informations.
     * @param filename - The filename used to instantiate the {@link sqlite3.Database} object.
     * @param mode - The mode used to instantiate the {@link sqlite3.Database} object.
     */
    static open(filename: string, mode?: number): Promise<AsyncDatabase>;
    /**
     * Close the database.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#closecallback | sqlite3.Database.close} for further informations.
     */
    close(): Promise<void>;
    /**
     * Runs the SQL query with the specified parameters.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#runsql--param---callback | sqlite3.Database.run} for further informations.
     * @param sql - The sql request.
     * @param params - Parameters for the request.
     */
    run(sql: string, ...params: unknown[]): Promise<sqlite3.RunResult>;
    /**
     * Runs the SQL query with the specified parameters.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#getsql--param---callback | sqlite3.Database.get} for further informations.
     * @param sql - The sql request.
     * @param params - Parameters for the request.
     */
    get<T>(sql: string, ...params: unknown[]): Promise<T>;
    /**
     * Runs the SQL query with the specified parameters.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#allsql--param---callback | sqlite3.Database.all} for further informations.
     * @param sql - The sql request.
     * @param params - Parameters for the request.
     */
    all<T>(sql: string, ...params: unknown[]): Promise<T[]>;
    /**
     * Runs the SQL query with the specified parameters and calls the callback once for each result row.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#eachsql--param---callback--complete | sqlite3.Database.each} for further informations.
     * @param sql - The sql request.
     * @param params - Parameters for the request.
     * @param callback - A callback that take a row.
     */
    each<T>(sql: string, params: any, callback: (row: T) => void): Promise<number>;
    /**
     * Runs all SQL queries in the supplied string.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#execsql--callback | sqlite3.Database.exec} for further informations.
     * @param sql - The sql request.
     */
    exec(sql: string): Promise<void>;
    /**
     * Prepares the SQL statement and optionally binds the specified parameters.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#preparesql--param---callback | sqlite3.Database.prepare} for further informations.
     * @param sql - The sql request.
     * @param params - Parameters for the request.
     */
    prepare(sql: string, ...params: unknown[]): Promise<AsyncStatement>;
}
/**
 * A thin wrapper around {@link sqlite3.Statement} that expose an async API.
 */
export declare class AsyncStatement {
    private statement;
    /**
     * Create a new {@link AsyncStatement} from a {@link sqlite3.Statement} object.
     *
     * @see Use {@link AsyncDatabase.prepare} to create a statement with the async API.
     *
     * @param statement - The {@link sqlite3.Statement} object.
     */
    constructor(statement: sqlite3.Statement);
    /**
     * @returns The inner {@link sqlite3.Statement} object.
     */
    get inner(): sqlite3.Statement;
    /**
     * Binds parameters to the prepared statement.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#bindparam---callback | sqlite3.Statement.bind} for further informations.
     * @param params - Parameters for the request.
     */
    bind(...params: unknown[]): Promise<void>;
    /**
     * Resets the row cursor of the statement and preserves the parameter bindings.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#resetcallback | sqlite3.Statement.reset} for further informations.
     */
    reset(): Promise<void>;
    /**
     * Finalizes the statement.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#finalizecallback | sqlite3.Statement.finalize} for further informations.
     */
    finalize(): Promise<void>;
    /**
     * Binds parameters and executes the statement.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#runparam---callback | sqlite3.Statement.run} for further informations.
     * @param params - Parameters for the request.
     */
    run(...params: unknown[]): Promise<sqlite3.RunResult>;
    /**
     * Binds parameters, executes the statement and retrieves the first result row.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#getparam---callback | sqlite3.Statement.get} for further informations.
     * @param params - Parameters for the request.
     */
    get<T>(...params: unknown[]): Promise<T | undefined>;
    /**
     * Binds parameters, executes the statement and calls the callback with all result rows.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#allparam---callback | sqlite3.Statement.all} for further informations.
     * @param params - Parameters for the request.
     */
    all<T>(...params: unknown[]): Promise<T[]>;
    /**
     * Binds parameters, executes the statement and calls the callback for each result row.
     *
     * @see {@link https://github.com/TryGhost/node-sqlite3/wiki/API#eachparam---callback--complete | sqlite3.Statement.each} for further informations.
     * @param params - Parameters for the request.
     * @param callback - A callback that take a row.
     */
    each<T>(params: any, callback: (row: T) => void): Promise<number>;
}
